#!/bin/bash

set -e

if ! [ -e /etc/tracker-tv-do.conf ]; then
  if tty >/dev/null; then
    export TTYOPTS=-it
  else
    export TTYOPTS=
  fi

  arch=$([ "$(arch)" = "x86_64" ] && echo "amd64" || echo "arm64")
  docker run --rm $TTYOPTS -w /opt -v /var/run/docker.sock:/var/run/docker.sock -e DIGITALOCEAN_ACCESS_TOKEN -v $PWD:/opt ghcr.io/tracker-tv/do-$arch:latest bin/do

  exit
fi

cluster_name=doks
region=fra1
k8s_version=1.31.1-do.5

if ! doctl kubernetes cluster get "$cluster_name" > /dev/null 2>&1; then
  echo "Creating cluster \"$cluster_name\"..."
  doctl kubernetes cluster create $cluster_name --region $region --version $k8s_version --node-pool "name=pool-medium;size=s-2vcpu-2gb;count=1;auto-scale=false,name=pool-high;size=s-2vcpu-4gb;count=1;auto-scale=false"
else
  echo "Cluster \"$cluster_name\" already exists."
  k8s_current_version=$(doctl kubernetes cluster get doks --output json | jq -r '.[0].version')
  if [ "$k8s_version" != "$k8s_current_version" ]; then
    echo "Upgrading cluster \"$cluster_name\" from $k8s_current_version to $k8s_version..."
    doctl kubernetes cluster upgrade $cluster_name --version $k8s_version
  fi
fi

doctl kubernetes cluster kubeconfig save "$cluster_name"

echo "Install ArgoCD"
helm repo add argo https://argoproj.github.io/argo-helm
# renovate-helm: depName=argo-cd registryUrl=https://argoproj.github.io/argo-helm
argocd_version=7.7.11
helm upgrade \
  --install argocd argo/argo-cd \
  --namespace "argocd" \
  --version $argocd_version \
  --create-namespace \
  --values k8s/argocd/helm/affinity.yml \
  --wait

echo "Install cert-manager"
helm repo add jetstack https://charts.jetstack.io
cert_manager_version=v1.16.2
helm upgrade \
  --install cert-manager jetstack/cert-manager \
  --namespace cert-manager \
  --version $cert_manager_version \
  --create-namespace \
  --set crds.enabled=true

echo "Install nginx ingress controller"
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
ingress_nginx_version=4.11.3
helm upgrade \
  --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --version $ingress_nginx_version \
  --create-namespace

echo "Waiting for ingress-nginx to be ready..."
sleep 10

kubectl apply -f k8s/argocd/ingress-controller.yml

app_domain=tracker-tv.com
argocd_record=argocd

if ! doctl compute domain get $app_domain > /dev/null 2>&1; then
  echo "Adding domain \"$app_domain\"..."
  doctl compute domain create $app_domain
else
  echo "Domain \"$app_domain\" already exists."
fi

a_record=$(doctl compute domain records list $app_domain -o json | jq '.[] | select(.name == "argocd" and .type == "A").name')

while true; do
  argocd_server_ingress_ip=$(kubectl get ingress -n argocd argocd-server-ingress -o json | jq -r '.status.loadBalancer.ingress[0].ip')

  # When ingress IP is available, add A record for "argocd"
  if [[ "$argocd_server_ingress_ip" != "null" && -n "$argocd_server_ingress_ip" ]]; then
    if [ "$a_record" == "" ]; then
      echo "Adding record A for \"argocd\"..."
      doctl compute domain records create $app_domain --record-type A --record-name $argocd_record --record-data $argocd_server_ingress_ip --record-ttl 3600
    else
      echo "Record A \"argocd\" already exists."
    fi
    break
  fi

  echo "Waiting for ingress IP..."
  sleep 5
done

echo "Install NATS server"
helm repo add nats https://nats-io.github.io/k8s/helm/charts/
nats_version=1.2.8
helm upgrade \
  --install nats nats/nats \
  --namespace nats \
  --version $nats_version \
  --create-namespace \
  --values k8s/nats/helm/affinity.yml \
  --wait

echo "Change ArgoCD url"
kubectl -n argocd patch cm argocd-cm -p '{"data": {"url": "https://argocd.tracker-tv.com"}}'
kubectl rollout -n argocd restart deploy argocd-server
